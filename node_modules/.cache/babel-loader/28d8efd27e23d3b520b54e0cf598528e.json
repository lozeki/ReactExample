{"ast":null,"code":"// src/js/middleware/index.js\n// when action type is ADD_ARTICLE check if action.payload.title contains a bad word. \n// If it does then dispatch an action of type FOUND_BAD_WORD, otherwise let the next middleware run.\nconst forbiddenWords = [\"spam\", \"money\"];\nexport function forbiddenWordsMiddleware(_ref) {\n  let {\n    dispatch\n  } = _ref;\n  return function (next) {\n    return function (action) {\n      // do your stuff\n      if (action.type === \"ADD_ARTICLE\") {\n        const foundWord = forbiddenWords.filter(word => action.payload.title.includes(word));\n\n        if (foundWord.length) {\n          return dispatch({\n            type: \"FOUND_BAD_WORD\"\n          });\n        }\n      }\n\n      return next(action);\n    };\n  };\n}","map":{"version":3,"sources":["/home/trnguyen/React_ws/react-redux-tutorial/src/js/middleware/index.js"],"names":["forbiddenWords","forbiddenWordsMiddleware","dispatch","next","action","type","foundWord","filter","word","payload","title","includes","length"],"mappings":"AAAA;AAEA;AACA;AAEA,MAAMA,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,CAAvB;AAEA,OAAO,SAASC,wBAAT,OAAgD;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACrD,SAAO,UAASC,IAAT,EAAe;AACpB,WAAO,UAASC,MAAT,EAAiB;AACtB;AACA,UAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AAEjC,cAAMC,SAAS,GAAGN,cAAc,CAACO,MAAf,CAAsBC,IAAI,IAC1CJ,MAAM,CAACK,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BH,IAA9B,CADgB,CAAlB;;AAIA,YAAIF,SAAS,CAACM,MAAd,EAAsB;AACpB,iBAAOV,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAf;AACD;AACF;;AACD,aAAOF,IAAI,CAACC,MAAD,CAAX;AACD,KAbD;AAcD,GAfD;AAgBD","sourcesContent":["// src/js/middleware/index.js\n\n// when action type is ADD_ARTICLE check if action.payload.title contains a bad word. \n// If it does then dispatch an action of type FOUND_BAD_WORD, otherwise let the next middleware run.\n\nconst forbiddenWords = [\"spam\", \"money\"];\n\nexport function forbiddenWordsMiddleware({ dispatch }) {\n  return function(next) {\n    return function(action) {\n      // do your stuff\n      if (action.type === \"ADD_ARTICLE\") {\n        \n        const foundWord = forbiddenWords.filter(word =>\n          action.payload.title.includes(word)\n        );\n\n        if (foundWord.length) {\n          return dispatch({ type: \"FOUND_BAD_WORD\" });\n        }\n      }\n      return next(action);\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}