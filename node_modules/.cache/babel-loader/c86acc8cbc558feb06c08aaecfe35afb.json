{"ast":null,"code":"var _jsxFileName = \"/home/trnguyen/React_ws/react-redux-tutorial/src/components/parent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Child1, Child2 } from \"./child\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Parent() {\n  _s();\n\n  const [isToggle, setToggle] = useState(true);\n  const [data, setData] = useState('Data from Parent');\n  {\n    /* function to toggle the data that we want to pass to the Child component  */\n  }\n\n  const handleChange = () => {\n    setData(isToggle == true ? \"New data from Parent\" : \"Old Data from Parent\");\n    setToggle(!isToggle);\n  };\n\n  const [childData, setChildData] = useState('Data from Child - Empty');\n\n  const receiveChildToParent = newChildData => {\n    setChildData(newChildData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Function Component - Parent - Pass data to Child\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleChange(),\n      children: \"Click to change the data ( From Parent to child)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Child1, {\n      parentToChild: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Function Component - Parent - get data from Child\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Parent - Data receive from Child - \", childData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Child2, {\n      childToParent: receiveChildToParent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Parent, \"LB/9CL+QNN7LO7m661lJAW4Cd/0=\");\n\n_c = Parent;\n\nvar _c;\n\n$RefreshReg$(_c, \"Parent\");","map":{"version":3,"sources":["/home/trnguyen/React_ws/react-redux-tutorial/src/components/parent.js"],"names":["React","Child1","Child2","useState","Parent","isToggle","setToggle","data","setData","handleChange","childData","setChildData","receiveChildToParent","newChildData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAeC,MAAf,QAA4B,SAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBH,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,kBAAD,CAAhC;AACA;AAAC;AAA+E;;AAChF,QAAMM,YAAY,GAAG,MAAM;AACvBD,IAAAA,OAAO,CAAGH,QAAQ,IAAE,IAAX,GAAiB,sBAAjB,GAAwC,sBAA1C,CAAP;AACAC,IAAAA,SAAS,CAAC,CAACD,QAAF,CAAT;AACH,GAHD;;AAKA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,yBAAD,CAA1C;;AACA,QAAMS,oBAAoB,GAAIC,YAAD,IAAkB;AAC3CF,IAAAA,YAAY,CAACE,YAAD,CAAZ;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAQ,MAAA,OAAO,EAAI,MAAMJ,YAAY,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI,QAAC,MAAD;AAAQ,MAAA,aAAa,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YANJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA,wDAAuCG,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAYI,QAAC,MAAD;AAAQ,MAAA,aAAa,EAAGE;AAAxB;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA,kBADJ;AAgBH;;GA9BuBR,M;;KAAAA,M","sourcesContent":["import React from 'react'\nimport {Child1,Child2} from \"./child\"\nimport { useState } from 'react';\n\nexport default function Parent() {    \n    const [isToggle, setToggle] = useState(true);\n    const [data, setData] = useState('Data from Parent');\n    {/* function to toggle the data that we want to pass to the Child component  */}\n    const handleChange = () => {        \n        setData( (isToggle==true)?\"New data from Parent\":\"Old Data from Parent\");\n        setToggle(!isToggle);\n    };\n\n    const [childData, setChildData] = useState('Data from Child - Empty');\n    const receiveChildToParent = (newChildData) => {\n        setChildData(newChildData);\n    };\n\n    return (\n        <>\n            <h2>Function Component - Parent - Pass data to Child</h2>    \n            {/* Can not use this. for function component, neeed parentthese () for the onClick function \n                pass the data to the Child component, and parentToChild is the name of the prop\n            */}\n            <button onClick = {() => handleChange()} >Click to change the data ( From Parent to child)</button>       \n            <Child1 parentToChild={data}/>   \n\n            <h2>Function Component - Parent - get data from Child</h2> \n            <p>Parent - Data receive from Child - {childData}</p> \n            {/* pass function receiveChildToParent as props to child Component\n            */}\n            <Child2 childToParent ={receiveChildToParent} />         \n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}